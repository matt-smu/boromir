primitive(networkServiceInfo(_host, _program, _protocol, _port, _perm)).
primitive(gateway(_host)).
primitive(flowExists(_src, _dst, _protocol, _port, _user)).

  /*
  interaction_rule(
  (netAccess(H3, Protocol, Port) :-
                gateway(H2), 
               advances(H1, H3),
    hacl(H1, H2, Protocol, Port),
    hacl(H2, H3, Protocol, Port)),
  rule_desc('multi-hop access by gateway', 0.5)).
  */
    interaction_rule(
  (netAccess(H2, _protocol, _port) :-
                gateway(H1), 
               advances(H1, H2),
               netAccess(H1, _protocol, _port),
    hacl(H1, H2, _protocol, _port)),
  rule_desc('multi-hop access by gateway', 0.5)).


  
  /*The following 2 rules were added to enable route hijacking*/
    interaction_rule(
  (principalCompromised(Victim) :-
				/* The victim has a user account on the remote host */
                hasAccount(Victim, RemoteHost, User),
                /* Route hijacking does not require that the victim and attacker are in the same subnet*/
                /*attackerLocated(Zone),
                hacl(Zone, H, _anyProtocol, _anyPort),*/
                /* nrlolsr is being used */
                networkServiceInfo(H, nrlolsr, olsr, _no_port, _user),
                /* nrlolsr is misconfigured allowing traffic hijacking */
                vulExists(H, nrlolsrVul, nrlolsr, remoteExploit, nrlolsrHijack),
                /* The User has an account on a login service on the remote host */
                logInService(RemoteHost, Protocol, Port),
                /* There is an active connection from the host to the remote machine */
                flowExists(H, RemoteHost, Protocol, Port, User)), 
  rule_desc('password sniffing through route hijack',
  0.8)).
  
  interaction_rule(
  (principalCompromised(Victim) :-
				/* The victim has a user account on the remote host */
                hasAccount(Victim, RemoteHost, User),
                /* Route hijacking does not require that the victim and attacker are in the same subnet*/
                /*attackerLocated(Zone),
                hacl(Zone, H, _anyProtocol, _anyPort),*/
                /* quagga_ospf_mdr3 is being used */
                networkServiceInfo(H, quagga_ospf_mdr3, ospf_mdr, _no_port, _user),
                /* quagga_ospf_mdr3 is misconfigured allowing traffic hijacking */
                vulExists(H, quagga_ospf_mdr3Vul, quagga_ospf_mdr3, remoteExploit, quagga_ospf_mdr3Hijack),
                /* The User has an account on a login service on the remote host */
                logInService(RemoteHost, Protocol, Port),
                /* There is an active connection from the host to the remote machine */
                flowExists(H, RemoteHost, Protocol, Port, User)), 
  rule_desc('password sniffing through route hijack',
  0.8)).

interaction_rule(
  (logInService(H, Protocol, Port) :-
                 networkServiceInfo(H, ftpd, Protocol, Port, _)),
                rule_desc('log in for ftpd',
                1)).


