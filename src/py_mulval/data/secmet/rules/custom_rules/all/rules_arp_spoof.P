primitive(networkServiceInfo(_host, _program, _protocol, _port, _perm)).
primitive(gateway(_host)).
primitive(flowExists(_src, _dst, _protocol, _port, _user)).


    interaction_rule(
  (netAccess(H2, _protocol, _port) :-
                gateway(H1), 
               advances(H1, H2),
               netAccess(H1, _protocol, _port),
    hacl(H1, H2, _protocol, _port)),
  rule_desc('multi-hop access by gateway', 0.5)).


  
  /*The following rule was added to enable arp spoofing*/
  interaction_rule(
  (principalCompromised(Victim) :-
                hasAccount(Victim, RemoteHost, User),
                /* Arp spoof works only if the victim and attacker are in the same subnet*/
                attackerLocated(Zone),
                hacl(Zone, H, _anyProtocol, _anyPort),
                /* Victim is using standard arp for address resolution*/
                networkServiceInfo(H, arpd, _protocol, _port, _),
                /* The standard arpd protocol is vulnerable to spoofing */
                vulExists(H, arpSpoofVuln, arpd, remoteExploit, arpSpoof),
                /* The User has an account on a login service on the remote host */
                logInService(RemoteHost, Protocol, Port),
                /* There is an active connection from the host to the remote machine */
                flowExists(H, RemoteHost, Protocol, Port, User)), 
  rule_desc('password sniffing through spoof',
  0.8)).
  
interaction_rule(
  (logInService(H, Protocol, Port) :-
                 networkServiceInfo(H, ftpd, Protocol, Port, _)),
                rule_desc('log in for ftpd',
                1)).


